# YAML configuration file for the MD with mutation workflow

# Global properties (common for all steps)
global_properties:
  amber:
    binary_path:                             # Path to which binary (different names)?
    mpi_bin: null                                                   # MPI binary path, e.g. mpirun, srun... (should be left as null if gromacs already includes MPI support)
    mpi_np: 1                                                       # Number of processors for MPI selected in the mpi_bin call
  working_dir_path: output                                          # Workflow default output directory
  can_write_console_log: False                                      # Verbose writing of log information
  restart: True                                                     # Skip steps already performed
  remove_tmp: True                                                  # Remove temporal files

#########################################################
# Section 1 (Step A): extract atoms from input PDB file #
#########################################################

# Step 1A: extract atoms from input PDB file
step1A_extractAtoms:
  tool: extract_molecule
  paths:
    input_structure_path: /path/to/input                            # Overwritten by command line
    output_molecule_path: main_structure.pdb
  properties:
    molecule_type: chains                                           # type of molecule to extract. Options: all, protein, na, dna, rna, chains
    chains: [A]                                                     # if "chains" is selected in molecule_type. Options: None, [A], [A, B], ...

step1B_extractLigands:
  tool: extract_heteroatoms
  paths:
    input_structure_path: /path/to/input                            # Overwritten by command line
    output_heteroatom_path: ligands.pdb
  properties:

########################################################
# Section 2 (Steps A-I): prepare main structure for MD #
########################################################

# Step 2 A: fix alternative locations of residues if any with biobb_structure_checking and the Modeller suite (if key property is given)
step2A_fixaltlocs:                 
  tool: fix_altlocs
  paths:
    input_pdb_path: dependency/step1A_extractAtoms/output_molecule_path
    output_pdb_path: fixaltlocs.pdb
  properties:
    altlocs: null                                                    # Format: ["Chain Residue_number:Altloc"], e.g. # ["A339:A", "A171:B", "A768:A"] 
    modeller_key: MODELIRANJE                           # MODELLER license key

# Step 2 B: Mutate residues in the structure if needed
step2B_mutations:
  tool: mutate
  paths:
    input_pdb_path: dependency/step2A_fixaltlocs/output_pdb_path
    output_pdb_path: mutated.pdb
  properties:
    # mutation_list: A:Arg220Ala                                      # List of mutations to include. Format: "Chain : Wild_type_residue_name Residue_number Mutated_type_residue_name", e.g. "A:Arg220Ala,A:Arg221Gly,B:Arg220Ala" 
    use_modeller: False                                               # Use MODELLER to optimize side chains
    # modeller_key: HERE YOUR MODELLER KEY                            # MODELLER license key

# Step 2 C: Download a FASTA file with the canonical sequence of the protein
# It requires internet connection and a PDB code
step2C_canonical_fasta:
  tool: canonical_fasta
  paths:
    output_fasta_path: canonicalFasta.fasta
  properties:
    pdb_code: null                                                    # Will be set by the workflow

# Step 2 C: Extract the residue sequence from the PDB file to FASTA format
step2C_pdb_tofasta:
  tool: biobb_pdb_tofasta
  paths:
    input_file_path: dependency/step1A_extractAtoms/input_structure_path
    output_file_path: pdbFasta.fasta
  properties:
    multi: True

# Step 2 D: Model missing backbone atoms with biobb_structure_checking and the Modeller suite
# It requires a MODELLER license 
step2D_fixbackbone:
  tool: fix_backbone
  paths:
    input_pdb_path: dependency/step2B_mutations/output_pdb_path
    input_fasta_canonical_sequence_path: dependency/step2C_canonical_fasta/output_fasta_path
    output_pdb_path: fixbackbone.pdb
  properties:
    add_caps: False
    modeller_key: MODELIRANJE

# Step 2 E: Model missing side chain atoms with biobb_structure_checking and the Modeller suite (if key property is given)
step2E_fixsidechain:
  tool: fix_side_chain
  paths:
    input_pdb_path: dependency/step2D_fixbackbone/output_pdb_path
    output_pdb_path: fixsidechain.pdb
  properties:
    use_modeller: False                                     # Use MODELLER to optimize side chains 
    modeller_key: MODELIRANJE  # MODELLER license key

# Step 2 F: Fix disulfide bonds with biobb_structure_checking (CYS -> CYX for cysteines involved in disulfide bonds)
# Optional step (activate from command line with --fix_ss)
step2F_fixssbonds:
  tool: fix_ssbonds
  paths:
    input_pdb_path: dependency/step2E_fixsidechain/output_pdb_path
    output_pdb_path: fixssbonds.pdb
  properties:
    modeller_key: MODELIRANJE  # MODELLER license key

# Step 2 G: Flip clashing amides with biobb_structure_checking and the Modeller suite
# Optional step (activate from command line with --fix_amides)
step2G_fixamides:
  tool: fix_amides
  paths:
    input_pdb_path: dependency/step2F_fixssbonds/output_pdb_path
    output_pdb_path: fixamides.pdb
  properties:
    modeller_key: MODELIRANJE  # MODELLER license key

step2H_fixchirality:
  tool: fix_chirality
  paths:
    input_pdb_path: dependency/step2G_fixamides/output_pdb_path
    output_pdb_path: fixchirality.pdb

step2I_catpdb:
  tool: cat_pdb 
  paths:
    input_structure1: dependency/step2H_fixchirality/output_pdb_path
    input_structure2: dependency/step1B_extractLigands/output_heteroatom_path
    output_structure_path: complex.pdb  

step2J_renumberstructure:
  tool: renumber_structure
  paths:
    input_structure_path: dependency/step2I_catpdb/output_structure_path
    output_structure_path: renumbered.pdb
    output_mapping_json_path: mapping.json
  properties:
    renumber_residues: True
    renumber_residues_per_chain: False

##################################################################
# Section 3 (Steps A-I): Prepare topology and coordinates for MD #
##################################################################

# Use pdb4amber to clean the PDB for AMBER
step3A_pdb4amber:
  tool: pdb4amber_run
  paths:
    input_pdb_path: dependency/step2J_renumberstructure/output_structure_path
    output_pdb_path: reduced.pdb
  properties:
    reduce: False

# Create topology and coordinates with tleap
step3B_complex_topology:
  tool: leap_gen_top
  paths: 
    input_pdb_path: dependency/step3A_pdb4amber/output_pdb_path
    output_pdb_path: complex_tleap.pdb
    output_top_path: complex_tleap.prmtop
    output_crd_path: complex_tleap.inpcrd
  properties:

# Minimize the H atoms in vacuum
step3C_vacuum_min_Hs:
  tool: sander_mdrun
  paths:
    input_top_path: dependency/step3B_complex_topology/output_top_path
    input_crd_path: dependency/step3B_complex_topology/output_crd_path
    input_ref_path: dependency/step3B_complex_topology/output_crd_path
    output_traj_path: minimized_Hs.crd
    output_rst_path: minimized_Hs.rst
    output_log_path: minimized_Hs.log
  properties:
    simulation_type: min_vacuo
    mdin: 
      maxcyc: 500
      ntpr: 5                        # print frequency
      ntr: 1                         # turn on Cartesian restraints
      restraintmask: :*&!@H=       # Restrain all atoms except H atoms
      restraint_wt: 50 

# Process minimization results
step3D_process_min:
  tool: process_minout
  paths:
    input_log_path: dependency/step3C_vacuum_min_Hs/output_log_path
    output_dat_path: process_min.dat
  properties:
    terms: ['ENERGY']

# Minimize the protein in vacuum (restraining ligands)
step3E_vacuum_min_receptor:
  tool: sander_mdrun
  paths:
    input_top_path: dependency/step3B_complex_topology/output_top_path
    input_crd_path: dependency/step3C_vacuum_min_Hs/output_rst_path
    input_ref_path: dependency/step3C_vacuum_min_Hs/output_rst_path
    output_traj_path: minimized_protein.crd
    output_rst_path: minimized_protein.rst
    output_log_path: minimized_protein.log
  properties:
    simulation_type: min_vacuo
    mdin: 
      maxcyc: 500
      ntpr: 5
      ntr: 1 
      restraintmask: :*&!@H* # Will be overwritten with ligand resnames
      restraint_wt: 500

# Process minimization results
step3F_process_min:
  tool: process_minout
  paths:
    input_log_path: dependency/step3E_vacuum_min_receptor/output_log_path
    output_dat_path: process_min.dat
  properties:
    terms: ['ENERGY']


